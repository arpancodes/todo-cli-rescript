// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

var getToday = (function() {
  let date = new Date();
  return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
    .toISOString()
    .split("T")[0];
});

var isEmpty = (function(x) {
  return !Boolean(x)
});

function returnInt(x) {
  if (x !== undefined) {
    return x;
  } else {
    return -1;
  }
}

function returnStr(x) {
  if (x !== undefined) {
    return x;
  } else {
    return "";
  }
}

var pending_todos_file = "todo.txt";

var completed_todos_file = "done.txt";

var help_string = "Usage :-\n$ ./todo add \"todo item\"  # Add a new todo\n$ ./todo ls               # Show remaining todos\n$ ./todo del NUMBER       # Delete a todo\n$ ./todo done NUMBER      # Complete a todo\n$ ./todo help             # Show usage\n$ ./todo report           # Statistics";

function readFile(filename) {
  if (!Fs.existsSync(filename)) {
    return [];
  }
  var text = Fs.readFileSync(filename, {
        encoding: "utf8",
        flag: "r"
      });
  return text.split("\n");
}

function appendToFile(filename, text) {
  Fs.appendFileSync(filename, text, {
        encoding: "utf8",
        flag: "a+"
      });
  
}

function writeFile(filename, lines) {
  Fs.writeFileSync(filename, lines, {
        encoding: "utf8",
        flag: "w"
      });
  
}

function updateFile(filename, updaterFn) {
  var contents = readFile(filename);
  var contents$1 = Curry._1(updaterFn, contents).join("\n");
  return writeFile(filename, contents$1);
}

function cmdHelp(param) {
  console.log(help_string);
  
}

function cmdLs(param) {
  var todos = readFile(pending_todos_file);
  if (todos.length === 0) {
    console.log("There are no pending todos!");
    return ;
  }
  var length = todos.length;
  var todos$1 = Belt_Array.reverse(todos).map(function (todo, index) {
        return "[" + String(length - index | 0) + "] " + todo;
      });
  console.log(todos$1.join("\n"));
  
}

function cmdAddTodo(text) {
  if (isEmpty(text)) {
    console.log("Error: Missing todo string. Nothing added!");
  } else {
    updateFile(pending_todos_file, (function (todos) {
            return Belt_Array.concat(todos, [text]);
          }));
    console.log("Added todo: \"" + text + "\"");
  }
  
}

function cmdDelTodo(number) {
  if (number < 0) {
    console.log("Error: Missing NUMBER for deleting todo.");
    return ;
  } else {
    return updateFile(pending_todos_file, (function (todos) {
                  if (number < 1 || number > todos.length) {
                    console.log("Error: todo #" + String(number) + " does not exist. Nothing deleted.");
                    return todos;
                  } else {
                    todos.splice(number, 1);
                    console.log("Deleted todo #" + String(number));
                    return todos;
                  }
                }));
  }
}

function cmdMarkDone(number) {
  if (number < 0) {
    console.log("Error: Missing NUMBER for marking todo as done.");
    return ;
  }
  var todos = readFile(pending_todos_file);
  if (number < 1 || number > todos.length) {
    console.log("Error: todo #" + String(number) + " does not exist.");
    return ;
  }
  var completedTodo = todos.splice(number, 1);
  writeFile(pending_todos_file, todos.join("\n"));
  var x = Belt_Array.get(completedTodo, 0);
  var completedTodo$1 = "x " + Curry._1(getToday, undefined) + " " + (
    x !== undefined ? x : ""
  ) + "\n";
  console.log(completedTodo$1);
  appendToFile(completed_todos_file, completedTodo$1);
  console.log("Marked todo #" + String(number) + " as done.");
  
}

function cmdReport(param) {
  var pending = readFile(pending_todos_file).length - 1 | 0;
  var completed = readFile(completed_todos_file).length - 1 | 0;
  console.log(Curry._1(getToday, undefined) + " Pending : " + String(pending) + " Completed : " + String(completed));
  
}

var argv = process.argv;

var x = Belt_Array.get(argv, 2);

var command = x !== undefined ? x : "";

var x$1 = Belt_Array.get(argv, 3);

var arg = x$1 !== undefined ? x$1 : "";

function start(param) {
  if (isEmpty(command)) {
    console.log(help_string);
    return ;
  }
  switch (command) {
    case "add" :
        return cmdAddTodo(arg);
    case "del" :
        var x = Belt_Int.fromString(arg);
        return cmdDelTodo(x !== undefined ? x : -1);
    case "done" :
        var x$1 = Belt_Int.fromString(arg);
        return cmdMarkDone(x$1 !== undefined ? x$1 : -1);
    case "help" :
        console.log(help_string);
        return ;
    case "ls" :
        return cmdLs(undefined);
    case "report" :
        return cmdReport(undefined);
    default:
      console.log(help_string);
      return ;
  }
}

start(undefined);

var encoding = "utf8";

exports.getToday = getToday;
exports.isEmpty = isEmpty;
exports.returnInt = returnInt;
exports.returnStr = returnStr;
exports.encoding = encoding;
exports.pending_todos_file = pending_todos_file;
exports.completed_todos_file = completed_todos_file;
exports.help_string = help_string;
exports.readFile = readFile;
exports.appendToFile = appendToFile;
exports.writeFile = writeFile;
exports.updateFile = updateFile;
exports.cmdHelp = cmdHelp;
exports.cmdLs = cmdLs;
exports.cmdAddTodo = cmdAddTodo;
exports.cmdDelTodo = cmdDelTodo;
exports.cmdMarkDone = cmdMarkDone;
exports.cmdReport = cmdReport;
exports.argv = argv;
exports.command = command;
exports.arg = arg;
exports.start = start;
/* argv Not a pure module */
